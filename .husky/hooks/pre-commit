#!/bin/sh
set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Funções auxiliares
log() {
    echo -e "${GREEN}[Pre-commit]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[Pre-commit]${NC} $1"
}

error() {
    echo -e "${RED}[Pre-commit]${NC} $1"
}

# Função para executar comandos com feedback
run_command() {
    local cmd="$1"
    local msg="$2"
    
    log "Executando $msg..."
    if ! eval "$cmd"; then
        error "Falha ao executar $msg"
        exit 1
    fi
}

# Verifica se há alterações staged
check_staged_changes() {
    if git diff --cached --quiet; then
        warn "Nenhuma alteração para commit"
        exit 0
    fi
}

# Função principal
main() {
    log "Iniciando hook pre-commit"

    # Verifica alterações staged
    check_staged_changes

    # Executa comandos do Go
    run_command "go mod tidy" "go mod tidy"
    run_command "go fmt ./..." "go fmt"
    run_command "go vet ./..." "go vet"
    run_command "golangci-lint run ./..." "golangci-lint"

    # Gera documentação Swagger
    run_command "swag init -g cmd/sender/main.go --parseDependency --parseInternal --quiet" "swagger"

    log "Pre-commit finalizado com sucesso!"
}

# Executa o script
main "$@"
